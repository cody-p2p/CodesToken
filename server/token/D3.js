/* App.svelte generated by Svelte v3.59.1 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "svelte/internal";

import LinePlot from './LinePlot.svelte';
import * as d3 from 'd3';

function create_fragment(ctx) {
	let div;
	let lineplot;
	let current;
	let mounted;
	let dispose;
	lineplot = new LinePlot({ props: { data: /*data*/ ctx[0] } });

	return {
		c() {
			div = element("div");
			create_component(lineplot.$$.fragment);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(lineplot, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "mousemove", /*onMousemove*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const lineplot_changes = {};
			if (dirty & /*data*/ 1) lineplot_changes.data = /*data*/ ctx[0];
			lineplot.$set(lineplot_changes);
		},
		i(local) {
			if (current) return;
			transition_in(lineplot.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(lineplot.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(lineplot);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let data = d3.ticks(-2, 2, 200).map(Math.sin);

	function onMousemove(event) {
		const [x, y] = d3.pointer(event);
		$$invalidate(0, data = data.slice(-200).concat(Math.atan2(x, y)));
	}

	return [data, onMousemove];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;
